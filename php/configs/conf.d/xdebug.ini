[xdebug]
zend_extension=xdebug.so

; This setting controls which Xdebug features are enabled.
xdebug.mode=debug,coverage

; The directory where Xdebug will write tracing, profiling, and garbage collection statistics to.
; This directory needs to be writable for the system user with which PHP is running.
xdebug.output_dir="/tmp/php"

; Xdebug will log to this file all file creations issues, Step Debugging connection attempts, failures, and debug communication.
xdebug.log="/usr/local/var/log/php/php-xdebug.log"

;;;
; Variable Display
;;;

; Xdebug will color var_dumps and stack traces output when in CLI mode and when the output is a tty.
xdebug.cli_color=1

; Errors will always be displayed, no matter what the setting of PHP's display_errors is.
xdebug.force_display_errors=1

; Controls whether Xdebug should collect the parameters passed
; to functions when a function call is recorded in either the function trace or the stack trace.
xdebug.collect_params=4

; These seven settings control which data from the superglobals is shown when an error situation occurs.
xdebug.dump.SERVER=REMOTE_ADDR,REQUEST_METHOD,REQUEST_URI
xdebug.dump.COOKIES=*
xdebug.dump.FILES=*
xdebug.dump.GET=*
xdebug.dump.POST=*
xdebug.dump.REQUEST=*
xdebug.dump.SESSION=*

; Xdebug will show a stack trace whenever an Error is raised - even if this Error is actually caught.
xdebug.show_error_trace=1

; Xdebug will show a stack trace whenever an Exception or Error is raised - even if this Exception or Error is actually caught.
xdebug.show_exception_trace=1

; Xdebug's generated stack dumps in error situations will also show all variables in the top-most scope.
; Beware that this might generate a lot of information, and is therefore turned off by default.
xdebug.show_local_vars=1

; Controls whether Xdebug should write the return value of function calls to the trace files.
xdebug.collect_return=1

; Controls whether Xdebug should add variable assignments to function traces. Assign-by-var (=&) assignments are included too.
xdebug.collect_assignments=1

;;;
; Profiling PHP Scripts
;;;

; This setting determines the name of the file that is used to dump traces into.
xdebug.profiler_output_name=PHPXdebugCachegrind.out.%H.%p.%t

;;;
; Remote debugging
;;;

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler.
xdebug.idekey=VSCODE

; Xdebug will disable the @ (shut-up) operator so that notices, warnings and errors are no longer hidden.
xdebug.scream=0

; Configures the IP address or hostname where Xdebug will attempt to connect to when initiating a debugging connection.
; This address should be the address of the machine where your IDE or debugging client is listening for incoming debugging connections.
; This setting is ignored if xdebug.discover_client_host is enabled.
xdebug.client_host=host.docker.internal

; The port to which Xdebug tries to connect on the remote host.
xdebug.client_port=9005

; A Function Trace, Garbage Collection Statistics, Profiling, or Step Debugging can be activated at the start of a PHP request.
xdebug.start_with_request=trigger

; The functionality only gets activated when a specific trigger is present when the request starts.
; ?XDEBUG_TRIGGER=StartProfileForMe
;
; There is also a legacy fallback to a functionality specific trigger name: XDEBUG_PROFILE (for Profiling), XDEBUG_TRACE (for a Function Trace),
; and XDEBUG_SESSION (for Step Debugging).
; Debug session management for Step Debugging is also available through XDEBUG_SESSION_START.
xdebug.trigger_value="StartProfileForMe"

; If enabled, Xdebug will first try to connect to the client that made the HTTP request. It checks the $_SERVER['HTTP_X_FORWARDED_FOR'] and $_SERVER['REMOTE_ADDR'] variables to find out which hostname or IP address to use.
xdebug.discover_client_host=false
